openapi: 3.0.3
info:
  title: movies-api - OpenAPI 3.0
  description: |-
    This is a movies api based on the OpenAPI 3.0 specification.
  version: 1.0.0
externalDocs:
  description: Github
  url: https://github.com/keithbutler-wit/movies-api
servers:
  - url: http://localhost:8080
  - url: http://localhost:3000
tags:
  - name: movies
    description: Access to movies list
    externalDocs:
      description: Find out more
      url: http://github.com/keithbutler-wit/movies-api
  - name: persons
    description: Access to actors list
    externalDocs:
      description: Find out more
      url: https://github.com/keithbutler-wit/movies-api
  - name: tvs
    description: Access to Tv shows list
    externalDocs:
      description: Find out more
      url: https://github.com/keithbutler-wit/movies-api
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more
      url: https://github.com/keithbutler-wit/movies-api
paths:
  /api/movies:
    post:
      tags:
        - movie
      summary: Add a new movie to the store
      description: Add a new movie to the store
      operationId: addMovie
      requestBody:
        description: Create a new movie in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
          application/xml:
            schema:
              $ref: '#/components/schemas/Movie'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Movie'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
            application/xml:
              schema:
                $ref: '#/components/schemas/Movie'
        '405':
          description: Invalid input
      security:
        - moviestore_auth:
            - write:movies
            - read:movies
  /api/movies/:id:
    get:
      tags:
        - movie
      summary: Finds Movies by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findByMovieDBId
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid tag value
      security:
        - moviestore_auth:
            - write:movies
            - read:movies
  /api/movies/:id/reviews:
    post:
      tags:
        - movie
      summary: Add a new movie to the store
      description: Add a new movie to the store
      operationId: addMovie
      requestBody:
        description: Create a new movie in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
          application/xml:
            schema:
              $ref: '#/components/schemas/Movie'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Movie'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
            application/xml:
              schema:
                $ref: '#/components/schemas/Movie'
        '405':
          description: Invalid input
      security:
        - moviestore_auth:
            - write:movies
            - read:movies
    get:
      tags:
        - movie
      summary: Finds Movies by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findByMovieDBId
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid tag value
      security:
        - moviestore_auth:
            - write:movies
            - read:movies
  /tmdb/upcoming:
    get:
      tags:
        - movie
      summary: List all upcoming movies
      description: Returns a movie list
      operationId: getMovieById
      parameters:
        - name: movieId
          in: path
          description: ID of movie to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
            application/xml:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
        - moviestore_auth:
            - write:movies
            - read:movies

  /api/tvs:
    post:
      tags:
        - tv
      summary: Add a new tv to the store
      description: Add a new tv to the store
      operationId: addTv
      requestBody:
        description: Create a new tv in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tv'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tv'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tv'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tv'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tv'
        '405':
          description: Invalid input
      security:
        - tvstore_auth:
            - write:tvs
            - read:tvs
  /api/tvs/:id:
    get:
      tags:
        - tv
      summary: Finds Tvs by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findByTvDBId
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tv'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tv'
        '400':
          description: Invalid tag value
      security:
        - tvstore_auth:
            - write:tvs
            - read:tvs

  /api/persons:
    get:
      tags:
        - person
      summary: Finds Actors
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findByPersonDBId
      parameters:
        - name: person
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
        - moviestore_auth:
            - write:movies
            - read:movies
  /api/persons/:id:
    get:
      tags:
        - person
      summary: Finds Actors by id
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findByPersonDBId
      parameters:
        - name: person
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
            application/xml:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid ID supplied
        '404':
          description: Movie not found
      security:
        - api_key: []
        - moviestore_auth:
            - write:movies
            - read:movies

  /api/users:
    get:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/:id:
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /api/users/?action=register:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/?action=authenticate:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: authenticateUser
      parameters:
        - name: username
          in: query
          description: The user name for authenticate
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for authenticate in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
components:
  schemas:
    Person:
      type: object
      properties:
        adult:
          type: boolean
          example: false
        gender:
          type: integer
          format: int64
          example: 1
        id:
          type: interger
          format: int64
        poster_path:
          type: string
        overview:
          type: string
        release_date:
          type: string
        original_title:
          type: string
        original_language:
          type: string
        title:
          type: string
        known_for:
          type: array
          adult:
            type: Boolean
          backdrop_path:
            type: string
          genre_ids:
            type: interger
            format: int64
          id:
            type: interger
            format: int64
          media_type:
            type: string
          original_language:
            type: string
          original_title:
            type: string
          overview:
            type: string
          poster_path:
            type: string
          release_date:
            type: string
          title:
            type: string
          video:
            type: Boolean
          vote_average:
            type: interger
            format: int64
          vote_count:
            type: interger
            format: int64
        known_for_department:
          type: string
        name:
          type: string
        popularity:
          type: interger
          format: int64
        profile_path:
          type: string
      xml:
        name: person

    User:
      type: object
      properties:
        # id:
        #   type: integer
          # format: int64
        #   example: 10
        username:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
      xml:
        name: user

    Movie:
      required:
        - name
        - photoUrls
      type: object
      properties:
        adult:
          type: boolean
          example: false
        id:
          type: integer
          format: int64
          example: 10
        poster_path:
          type: string
          example: /tnAuB8q5vv7Ax9UAEje5Xi4BXik.jpg
        overview:
          type: string
          example: "Determined to ensure Superman's ultimate sacrifice was not in vain..."
        release_date:
          type: string
          example: "2021-03-18"
        original_language:
          type: string
          example: en
        original_title:
          type: string
          example: "Zack Snyder's Justice League"
        genre_ids:
          type: array
          id:
            type: integer
            format: int64
          example: [10, 12, 24]
        title:
          type: string
          example: "Zack Snyder's Justice League"
        backdrop_path:
          type: string
          example: "/hJuDvwzS0SPlsE6MNFOpznQltDZ.jpg"
        popularity:
          type: integer
          format: int64
          example: 11783
        vote_count:
          type: integer
          format: int64
          example: 3389
        video:
          type: boolean
          example: false
        vote_average:
          type: integer
          format: int64
          example: 8.7
        production_countries:
          type: array
          iso_31661_1:
            type: string
          name:
            type: string
          example:
        runtime:
          type: integer
          format: int64
          example:
        spoken_languages:
          type: array
          iso_31661_1:
            type: string
          name:
            type: string
          example:
        status:
          type: string
          example:
        tagline:
          type: string
          example:

        # category:
        #   $ref: '#/components/schemas/Category'
        # photoUrls:
        #   type: array
        #   xml:
        #     wrapped: true
        #   items:
        #     type: string
        #     xml:
        #       name: photoUrl
        # tags:
        #   type: array
        #   xml:
        #     wrapped: true
        #   items:
        #     $ref: '#/components/schemas/Tag'
        # status:
        #   type: string
        #   description: movie status in the store
        #   enum:
        #     - available
        #     - pending
        #     - sold
      xml:
        name: movie
    Tv:
      required:
        - name
        - photoUrls
      type: object
      properties:
        adult:
          type: boolean
          example: false
        backdrop_path:
          type: string
          example: "/hJuDvwzS0SPlsE6MNFOpznQltDZ.jpg"
        first_air_date:
          type: string
          format: date-time
          example: "2021-03-18"
        genre_ids:
          type: array
          id:
            type: integer
            format: int64
          example: [10, 12, 24]
        homepage:
          type: string
          example:
        id:
          type: integer
          format: int64
          example: 10
        in_production:
          type: boolean
          example: false
        languages:
          type: array
          id:
            type: String
          example: [en, fr, ie]
        last_air_date:
          type: array
          date:
            type: String
            format: date-time
          example: ["2021-03-18"]
        name:
          type: string
          example:
        number_of_episodes:
          type: array
          id:
            type: integer
            format: int64
          example: [10, 12, 24]
        number_of_seasons:
          type: array
          id:
            type: integer
            format: int64
          example: [10, 12, 24]
        origin_country:
          type: string
          example: United States Of America
        origin_language:
          type: string
          example: en
        overview:
          type: string
          example: "Determined to ensure Superman's ultimate sacrifice was not in vain..."
        popularity:
          type: integer
          format: int64
          example: 11783
        poster_path:
          type: string
          example: /tnAuB8q5vv7Ax9UAEje5Xi4BXik.jpg
        status:
          type: string
          example:
        tagline:
          type: string
          example:
        vote_average:
          type: integer
          format: int64
          example: 8.7
        vote_count:
          type: integer
          format: int64
          example: 3389
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Movie:
      description: Movie object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Movie'
        application/xml:
          schema:
            $ref: '#/components/schemas/Movie'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    moviestore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://moviestore3.swagger.io/oauth/authorize
          scopes:
            write:movies: modify movies in your account
            read:movies: read your movies
    api_key:
      type: apiKey
      name: api_key
      in: header
